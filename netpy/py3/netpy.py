#!/usr/env/python3

# TODO: Replace global variables
# Specify upload location from client
# Allow password protection

import sys
import socket 
import getopt
import threading 
import subprocess 

# Some globals (to be replaced later)
listen = False
command = False
upload = False
download = False
execute = ""
target = ""
destination = ""
port = 0
awaiting_response = False
upload_file = ""
download_file = ""
output_file = ""

def usage():
    print("NetPy - a simple drop in netcat replacement")
    print()
    print("Usage: netpy.py -t target_host -p target_port")
    print()
    print("Optional flags (Server):")
    print("{} - listen on <host>:<port> for incoming connections".format("\t-l --listen".ljust(20," ")))
    print("{} - execute the selected file when is connection received".format("\t-e --execute=file".ljust(20," ")))
    print("{} - create a command shell".format("\t-s --shell".ljust(20," ")))
    print("{} - recieve files to be uploaded".format("\t-u --upload".ljust(20," ")))
    print("{} - recieve request for files to be downloaded".format("\t-z --transfer".ljust(20," ")))
    print()
    print("Optional flags (Client):")
    print("{} - file to upload, must specify destination with -d, must connect to server with -u enabled".format("\t-f --file".ljust(20," ")))
    print("{} - file to download, must specify output destination with -d, must connect to server with -t enabled".format("\t-r --recieve".ljust(20," ")))
    print("{} - destination for file to be uploaded to".format("\t-d --destination".ljust(20," ")))
    print()

    sys.exit(0)


def main():
    global listen
    global command
    global upload
    global execute
    global target
    global destination
    global port
    global upload_file
    global download
    global download_file

    # Detect if params are missing, if they are show usage
    if not len(sys.argv) > 1:
        usage()

    # Get the options
    try: 
        opts,args = getopt.getopt(sys.argv[1:],"hle:t:p:f:d:r:suz",["help","listen","execute","target","port","file","destination","recieve","shell","upload","transfer"])
    except getopt.GetoptError as e:
        print(str(e))
        usage()
    for o,a in opts:
        if o in ("-h","--help"):
            usage()
        elif o in ("-l","--listen"):
            listen = True;
        elif o in ("-e","--execute"):
            execute = a
        elif o in ("-s","--shell"):
            command = True
        elif o in ("-u","--upload"):
            upload = True
        elif o in ("-f,--file"):
            upload = True
            upload_file = a
        elif o in ("-d","--destination"):
            destination = a
        elif o in ("-r","--recieve"):
            download = True
            download_file = a
        elif o in ("-t","--target"):
            target = a
        elif o in ("-p","--port"):
            port = int(a)
        elif o in ("-z","--transfer"):
            download = True
            download_file = a
        else:
            print("[!] Invalid option {} with value {}".format(o,a))
            sys.exit(1)

    if not listen and len(target) and port > 0:
        
        print("[+] Acting in client mode")
        if upload: 
            send_file()
        elif download:
            recieve_file()
        else:
            input_buffer = input("Initial input: ")

            client_sender(input_buffer)
    if listen:
        print("[+] Acting in server mode")
        server_loop()

def recieve_file():

    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("dl is " + download_file)
    try:

        client.connect((target,port))

        print("[+] Binding socket {}:{}".format(target,port))
        client.send("TARGET: {}".format(download_file).encode('utf-8'))

        confirmation = client.recv(1024).decode('utf-8')
        while "[+]" not in confirmation and "[-]" not in confirmation:
            confirmation = client.recv(1024).decode('utf-8')

        print(confirmation)

        client.send("CONFIRM".encode('utf-8'))

        file_buffer = open(destination,'wb')

        data = client.recv(1024)
        recv_len = len(data)
        print("[+] Recieving file")
        while recv_len:
            incoming_data = client.recv(1024)
            recv_len = len(incoming_data)
            data += incoming_data
            if recv_len < 1024:
                break

        print("[+] Saving file")
        file_buffer.write(data)
        print("[+] File saved")
        file_buffer.close()
        client.close()

    except:
        import traceback
        traceback.print_exc()
        print("[!] Excpetion! Exiting")
        client.close()

def send_file():

    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:
        print("[+] Binding socket {}:{}".format(target,port))
        client.connect((target,port))
        print("TARGET: {}".format(destination))
        client.send("TARGET: {}".format(destination).encode('utf-8'))
        
        confirm = client.recv(1024)

        while not confirm:
            confirm = client.recv(1024)

        print("sending file")
        file_descriptor = open(upload_file, 'rb')
        read_data = file_descriptor.read(1024)
        while read_data:
            print("sending")
            client.send(read_data)
            read_data = file_descriptor.read(1024)
        print("[+] File sent")
        file_descriptor.close()
        result = client.recv(1024)
        recv_len = len(result)
        while recv_len:
            incoming = client.recv(1024)
            recv_len = len(incoming)
            result += incoming
        print(result.decode('utf-8'))
        client.close()

    except:
        print("[!] Exception! Exiting.")
        client.close()


def client_sender(buffer):
    global awaiting_response

    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try: 
        print("[+] Binding socket {}:{}".format(target,port))

        client.connect((target,port))

        if len(buffer):
            client.send(buffer.encode('utf-8'))

        while True:
            recv_len = 1
            response = ""

            while recv_len:
                data = client.recv(4096).decode('utf-8')
                recv_len = len(data)
                response += data

                if recv_len < 4096 and (recv_len != 2 or not awaiting_response or len(response) > 2):
                    awaiting_response = False
                    break

            if response not in ("\r\n"):
                print(response, end="")

            buffer = input("<NetPy:#> ")
            if buffer:
                awaiting_response = True
            buffer += "\n"

            client.send(buffer.encode('utf-8'))

    except:
        print("[!] Exception! Exiting.")
        client.close()

def server_loop():
    global target 

    if not len(target):
        target = "0.0.0.0"
    print("[+] Binding socket on target {}:{}".format(target,port))
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((target,port))

    server.listen(5)
    print("[+] Listening for connection")

    while True: 
        client_socket, addr = server.accept()
        print("[+] Successfully received connection from {}".format(addr))
        client_thread = threading.Thread(target=client_handler, args=(client_socket,))

        client_thread.start()

def run_command(command):
    command = command.rstrip()

    try:
        output = subprocess.check_output(command,stderr=subprocess.STDOUT, shell=True)
    except: 
        output = "[-] Failed to execute command.\r\n".encode('utf-8')

    return output

def client_handler(client_socket):
    global execute
    global destination
    global command

    if upload:

        incoming_command = client_socket.recv(1024).decode('utf-8')
        while "TARGET:" not in incoming_command:
            incoming_command = client_socket.recv(1024).decode('utf-8')


        destination = incoming_command.replace("TARGET:","").strip()

        client_socket.send("CONFIRM".encode('utf-8'))
        data = client_socket.recv(1024)
        recv_len = len(data)
        while recv_len:
            new_data = client_socket.recv(1024)
            print("data")
            recv_len = len(new_data)
            data += new_data
            if recv_len < 1024:
                break
        file_buffer = data

        try: 
            file_descriptor = open(destination,'wb')
            file_descriptor.write(file_buffer)
            file_descriptor.close()
            client_socket.send("[+] Successfully saved file to {}\r\n".format(destination).encode('utf-8'))
        except:
            client_socket.send("[-] Failed to save file to {}\r\n".format(destination).encode('utf-8'))

    if download:

        incoming_command = client_socket.recv(1024).decode('utf-8')
        while "TARGET:" not in incoming_command:
            incoming_command = client_socket.recv(1024).decode('utf-8')
        requested_file = incoming_command.replace("TARGET:","").strip()
        try:
            file_descriptor = open(requested_file,'rb')
            client_socket.send("[+] File preparing for transfer".encode('utf-8'))

            confirmation = client_socket.recv(1024).decode('utf-8')
            while "CONFIRM" not in confirmation:
                confirmation = client_socket.recv(1024).decode('utf-8')

            read_data = file_descriptor.read(1024)
            while read_data:
                client_socket.send(read_data)
                read_data = file_descriptor.read(1024)
            file_descriptor.close()

        except:
            client_socket.send("[-] File not found or permission denied".encode('utf-8'))
        

    if execute:

        output = run_command(execute)

        client_socket.send(output)

    if command:
        while True:
            client_socket.send("\r\n".encode('utf-8'))

            cmd_buffer = ""
            while "\n" not in cmd_buffer:
                cmd_buffer += client_socket.recv(1024).decode('utf-8')

            response = run_command(cmd_buffer)
            client_socket.send(response)

if __name__ == "__main__":
    main()
