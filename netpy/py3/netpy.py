#!/usr/env/python3

import sys
import socket 
import getopt
import threading 
import time
import subprocess 

# Some globals (to be replaced later)
listen = False
command = False
upload = False
execute = ""
target = ""
upload_destination = ""
port = 0
awaiting_response = False

def usage():
    print("NetPy - a simple drop in netcat replacement")
    print()
    print("Usage: netpy.py -t target_host -p target_port")
    print()
    print("Optional flags:")
    print("{} - listen on <host>:<port> for incoming connections".format("\t-l --listen".ljust(20," ")))
    print("{} - execute the selected file when is connection received".format("\t-e --execute=file".ljust(20," ")))
    print("{} - create a command shell".format("\t-s --shell".ljust(20," ")))
    print("{} - upload file to <dest> when connection is received".format("\t-u --upload=dest".ljust(20," ")))
    print()

    sys.exit(0)


def main():
    global listen
    global command
    global upload
    global execute
    global target
    global upload_destination
    global port

    # Detect if params are missing, if they are show usage
    if not len(sys.argv) > 1:
        usage()

    # Get the options
    try: 
        opts,args = getopt.getopt(sys.argv[1:],"hle:t:p:su",["help","listen","execute","target","port","shell","upload"])
    except getopt.GetoptError as e:
        print(str(e))
        usage()

    for o,a in opts:
        if o in ("-h","--help"):
            usage()
        elif o in ("-l","--listen"):
            listen = True;
        elif o in ("-s","--shell"):
            command = True
        elif o in ("-u","--upload"):
            upload_destination = a
        elif o in ("-t","--target"):
            target = a
        elif o in ("-p","--port"):
            port = int(a)
        else:
            print("[!] Invalid option {} with value {}".format(o,a))
            sys.exit(1)

    if not listen and len(target) and port > 0:
        
        print("[+] Acting in client mode")

        input_buffer = input("Initial input: ")

        client_sender(input_buffer)


    if listen:
        print("[+] Acting in server mode")
        server_loop()

    
def client_sender(buffer):
    global awaiting_response

    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try: 
        print("[+] Binding socket {}:{}".format(target,port))

        client.connect((target,port))

        if len(buffer):
            client.send(buffer.encode('utf-8'))
        while True:
            recv_len = 1
            response = ""

            while recv_len:
                data = client.recv(4096).decode('utf-8')
                recv_len = len(data)
                response += data

                if recv_len < 4096 and (recv_len != 2 or not awaiting_response or len(response) > 2):
                    awaiting_response = False
                    break

            if response not in ("\r\n"):
                print(response, end="")

            buffer = input("<NetPy:#> ")
            if buffer:
                awaiting_response = True
            buffer += "\n"

            client.send(buffer.encode('utf-8'))

    except:
        print("[!] Exception! Exiting.")
        client.close()

def server_loop():
    global target 

    if not len(target):
        target = "0.0.0.0"
    print("[+] Binding socket on target {}:{}".format(target,port))
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((target,port))

    server.listen(5)
    print("[+] Listening for connection")

    while True: 
        client_socket, addr = server.accept()
        print("[+] Successfully received connection from {}".format(addr))
        client_thread = threading.Thread(target=client_handler, args=(client_socket,))

        client_thread.start()

def run_command(command):
    command = command.rstrip()

    try:
        output = subprocess.check_output(command,stderr=subprocess.STDOUT, shell=True)
    except: 
        output = "[-] Failed to execute command.\r\n".encode('utf-8')

    return output

def client_handler(client_socket):
    global upload
    global execute
    global command

    if len(upload_destination):
        file_buffer = ""

        while True:
            data = client_socket.recv(1024).decode('utf-8')

            if not data:
                break
            else:
                file_buffer += data

        try: 
            file_descriptor = open(upload_destination,"wb")
            file_descriptor.write(file_buffer)
            file_descriptor.close()

            client_socket.send("[+] Successfully saved file to {}\r\n".format(upload_destination).encode('utf-8'))
        except:
            client_socket.send("[-] Failed to save file to {}\r\n".format(upload_destination).encode('utf-8'))

    if len(execute):

        output = run_command(execute)

        client_socket.send(output.encode('utf-8'))

    if command:
        while True:
            client_socket.send("\r\n".encode('utf-8'))

            cmd_buffer = ""
            while "\n" not in cmd_buffer:
                cmd_buffer += client_socket.recv(1024).decode('utf-8')

            response = run_command(cmd_buffer)
            client_socket.send(response)

if __name__ == "__main__":
    main()