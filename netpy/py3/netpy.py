#!/usr/env/python3

# TODO: Use hash for password
#       Deal with errors on auth better
#       clean auth up in general
#       documentation
#       read me


import sys
import socket 
import getopt
import threading 
import subprocess 

def usage():
    print("NetPy - a simple drop in netcat replacement")
    print()
    print("Usage: netpy.py -t target_host -p target_port")
    print()
    print("Optional flags (Server):")
    print("{} - listen on <host>:<port> for incoming connections".format("\t-l --listen".ljust(20," ")))
    print("{} - create a command shell".format("\t-s --shell".ljust(20," ")))
    print("{} - recieve files to be uploaded".format("\t-u --upload".ljust(20," ")))
    print("{} - recieve request for files to be downloaded".format("\t-z --transfer".ljust(20," ")))
    print("{} - specify password required for connection".format("\t-a --auth".ljust(20," ")))
    print()
    print("Optional flags (Client):")
    print("{} - file to upload, must specify destination with -d, must connect to server with -u enabled".format("\t-f --file".ljust(20," ")))
    print("{} - file to download, must specify output destination with -d, must connect to server with -t enabled".format("\t-r --recieve".ljust(20," ")))
    print("{} - destination for file to be uploaded to".format("\t-d --destination".ljust(20," ")))
    print("{} - specify password to connect with".format("\t-a --auth".ljust(20," ")))
    print()
  
    sys.exit(0)


def main():
    listen = False
    command = False
    upload = False
    download = False
    target = ""
    port = 0
    transfer_file = ""
    destination = ""
    auth = False
    password = ""

    # Detect if params are missing, if they are show usage
    if not len(sys.argv) > 1:
        usage()

    # Get the options
    try: 
        opts,args = getopt.getopt(sys.argv[1:],"hlt:p:f:d:r:a:suz",["help","listen","target","port","file","destination","recieve","auth","shell","upload","transfer"])
    except getopt.GetoptError as e:
        print(str(e))
        usage()
    for o,a in opts:
        if o in ("-h","--help"):
            usage()
        elif o in ("-l","--listen"):
            listen = True;
        elif o in ("-s","--shell"):
            command = True
        elif o in ("-u","--upload"):
            upload = True
        elif o in ("-f,--file"):
            upload = True
            transfer_file = a
        elif o in ("-d","--destination"):
            destination = a
        elif o in ("-r","--recieve"):
            download = True
            transfer_file = a
        elif o in ("-t","--target"):
            target = a
        elif o in ("-p","--port"):
            port = int(a)
        elif o in ("-z","--transfer"):
            download = True
            transfer_file = a
        elif o in ("-a","--auth"):
            auth = True
            password = a
        else:
            print("[!] Invalid option {} with value {}".format(o,a))
            sys.exit(1)

    if not listen and len(target) and port > 0:
        
        print("[+] Acting in client mode")
        if upload: 
            send_file(target, port, transfer_file, destination, auth, password)
        elif download:
            recieve_file(target, port, transfer_file, destination, auth, password)
        else:
            client_sender(target, port, auth, password)
    if listen:
        print("[+] Acting in server mode")
        server_loop(command, upload, download, target, port, auth, password)


def connect_to_server(target, port, auth, password):
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        print("[+] Binding socket {}:{}".format(target,port))
        client.connect((target,port))

        if not auth:
            return client

        client.send(password.encode('utf-8'))

        result = client.recv(1024).decode('utf-8')

        while "[+]" not in result and "[!]" not in result:
            result = client.recv(1024).decode('utf-8')
        
        print(result)

        if "[!]" in result:
            sys.exit(0)
        else:
            return client
                            

    except:
        print("[!] Exception! Exitting")


def recieve_file(target, port, transfer_file, destination, auth, password):

    try:
        client = connect_to_server(target, port, auth, password)

        client.send("TARGET: {}".format(transfer_file).encode('utf-8'))

        confirmation = client.recv(1024).decode('utf-8')
        while "[+]" not in confirmation and "[-]" not in confirmation:
            confirmation = client.recv(1024).decode('utf-8')

        print(confirmation)

        client.send("CONFIRM".encode('utf-8'))

        file_buffer = open(destination,'wb')

        data = client.recv(1024)
        recv_len = len(data)
        print("[+] Recieving file")
        while recv_len:
            incoming_data = client.recv(1024)
            recv_len = len(incoming_data)
            data += incoming_data
            if recv_len < 1024:
                break

        print("[+] Saving file")
        file_buffer.write(data)
        print("[+] File saved")
        file_buffer.close()
        client.close()

    except:
        print("[!] Excpetion! Exiting")
        client.close()


def send_file(target, port, transfer_file, destination, auth, password):

    try:
        client = connect_to_server(target, port, auth, password)
        client.send("TARGET: {}".format(destination).encode('utf-8'))
        
        confirm = client.recv(1024)

        while not confirm:
            confirm = client.recv(1024)

        file_descriptor = open(transfer_file, 'rb')
        read_data = file_descriptor.read(1024)
        while read_data:
            client.send(read_data)
            read_data = file_descriptor.read(1024)
        print("[+] File sent")
        file_descriptor.close()
        result = client.recv(1024)
        recv_len = len(result)
        print(result.decode('utf-8'))
        client.close()

    except:
        print("[!] Exception! Exiting.")
        client.close()


def client_sender(target, port, auth, password):
    awaiting_response = False

    try: 
        client = connect_to_server(target, port, auth, password)

        while True:
            recv_len = 0
            response = ""

            while recv_len or awaiting_response:
                data = client.recv(4096).decode('utf-8')
                recv_len = len(data)
                response += data

                if recv_len < 4096 and (recv_len != 2 or not awaiting_response or len(response) > 2):
                    awaiting_response = False
                    break
            if response not in ("\r\n"):
                print(response, end="")

            buffer = input("<NetPy:#> ")
            if buffer:
                awaiting_response = True
            buffer += "\n"

            client.send(buffer.encode('utf-8'))

    except:
        print("[!] Exception! Exiting.")
        client.close()


def server_loop(command, upload, download, target, port, auth, password):

    if not len(target):
        target = "0.0.0.0"
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((target,port))

    server.listen(5)
    print("[+] Listening for connection")

    while True: 
        client_socket, addr = server.accept()
        print("[+] Successfully received connection from {}".format(addr))

        if auth:
            incoming_password = client_socket.recv(1024).decode('utf-8')
            if incoming_password == password:
                client_socket.send("[+] Authenticated".encode('utf-8'))
            else:
                client_socket.send("[!] Authentication failed".encode('utf-8'))
                pass
        client_thread = threading.Thread(target=client_handler, args=(client_socket,command,upload,download,))

        client_thread.start()


def run_command(command):
    command = command.rstrip()

    try:
        output = subprocess.check_output(command,stderr=subprocess.STDOUT, shell=True)
    except: 
        output = "[-] Failed to execute command.\r\n".encode('utf-8')

    return output


def client_handler(client_socket, command, upload, download,):

    if upload:

        incoming_command = client_socket.recv(1024).decode('utf-8')
        while "TARGET:" not in incoming_command:
            incoming_command = client_socket.recv(1024).decode('utf-8')


        destination = incoming_command.replace("TARGET:","").strip()

        client_socket.send("CONFIRM".encode('utf-8'))
        data = client_socket.recv(1024)
        recv_len = len(data)
        while recv_len:
            new_data = client_socket.recv(1024)
            recv_len = len(new_data)
            data += new_data
            if recv_len < 1024:
                break
        file_buffer = data

        try: 
            file_descriptor = open(destination,'wb')
            file_descriptor.write(file_buffer)
            file_descriptor.close()
            client_socket.send("[+] Successfully saved file to {}\r\n".format(destination).encode('utf-8'))
        except:
            client_socket.send("[-] Failed to save file to {}\r\n".format(destination).encode('utf-8'))

    if download:

        incoming_command = client_socket.recv(1024).decode('utf-8')
        while "TARGET:" not in incoming_command:
            incoming_command = client_socket.recv(1024).decode('utf-8')
        requested_file = incoming_command.replace("TARGET:","").strip()
        try:
            file_descriptor = open(requested_file,'rb')
            client_socket.send("[+] File preparing for transfer".encode('utf-8'))

            confirmation = client_socket.recv(1024).decode('utf-8')
            while "CONFIRM" not in confirmation:
                confirmation = client_socket.recv(1024).decode('utf-8')

            read_data = file_descriptor.read(1024)
            while read_data:
                client_socket.send(read_data)
                read_data = file_descriptor.read(1024)
            file_descriptor.close()

        except:
            client_socket.send("[-] File not found or permission denied".encode('utf-8'))

    if command:
        while True:
            client_socket.send("\r\n".encode('utf-8'))

            cmd_buffer = ""
            while "\n" not in cmd_buffer:
                cmd_buffer += client_socket.recv(1024).decode('utf-8')

            response = run_command(cmd_buffer)
            client_socket.send(response)

if __name__ == "__main__":
    main()
