#!/usr/env/python3

import sys 
import threading 
import zipfile 
import getopt

pass_found = False

def usage():
    print("Zipcracker - Dictionary attack against zip folders")
    print()
    print("Usage: zipcracker -f [zipfolder] -d [dictionary file]")
    print()
    print("{} - Target zip file".format("\t-f --file".ljust(20," ")))
    print("{} - Target zip file".format("\t-d --dictionary".ljust(20," ")))
    print()


def main():
    file = None
    dictionary = None

    if not len(sys.argv) > 1:
        usage()
        sys.exit(1)

    try: 
        opts,args = getopt.getopt(sys.argv[1:],"f:d:",["file","dictionary"])
    except getopt.GetoptError as e:
        print(str(e))
        usage()
        sys.exit(1)

    for o,a in opts:
        if o in ("-f","--file"):
            file = zipfile.ZipFile(a)
        elif o in ("-d","--dictionary"):
            dictionary = open(a)
        else:
            print("[!] Invalid option {} with value {}".format(o,a))
            sys.exit(1)

    exit = False
    if file is None:
        print("[!] Must provide a zip file to crack")
        exit = True
    if dictionary is None:
        print("[!] Must provide a dictionary to crack with")
        exit = True
    if exit:
        sys.exit(1)

    print("[+] Attempting to crack password")
    threads = []
    for line in dictionary.readlines():
        if pass_found:
            break
        password = line.strip('\n')
        t = threading.Thread(target=attemptExtract, args=(file, password))
        threads.append(t)
        t.start()

    threads = [t.join(1) for t in threads if t is not None and t.isAlive()]
    while threads:
        threads = [t.join(1) for t in threads if t is not None and t.isAlive()]

    if not pass_found:
        print("[-] Failed to find password")

    print("[+] Cracking completed")


def attemptExtract(file, password):
    global pass_found
    try:
        file.extractall(pwd=password.encode())
        print("[+] Password found: {}".format(password))
        pass_found = True
    except:
        pass


if __name__ == '__main__':
    main()